Q.1  What Is Object Oriented Programming?
=>  Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects," which can encapsulate data and behavior. Here are the key principles of OOP:
- Encapsulation
- Inheritance
- Polymorphism
- Abstraction


Q.2  What are Properties Of Object Orineted Systems?
=>  Object-oriented systems have several key properties that enhance their functionality and design. Here are the main properties:
- Modularity
- Reusability
- Abstraction
- Encapsulation
- Polymorphism
- Dynamic Binding
- Hierarchy

Q.3  What is Difference Between Class And Interface?
=>  Here are some other differences between classes and interfaces: 
- Inheritance:
  Classes can only extend one class, but they can implement multiple interfaces. 
- Access modifiers: 
  Classes have access modifiers for variables and methods, while interfaces can only have public access modifiers for methods. 
- Constructors: 
  Classes can contain constructors, but interfaces do not. 
- Variables: 
  In a class, variables can be static, final, or neither, but all variables in an interface are static and final. 
- Abstract methods: 
  Classes cannot contain abstract methods, but interfaces can. 

Q.4  What Is Overloading?
=>  Overloading in PHP provides means to dynamically create properties and methods. These dynamic entities are processed via magic methods one can establish in a class for various action types.

Q.5  What is T-PAAMAYIM_NEKUDOTAYIM(Scoped Resolution Operator(::) With Example?
=>  In PHP, the T_PAAMAYIM_NEKUDOTAYIM (often referred to as the "Scope Resolution Operator") is represented by ::. It is used to access static, constant, and overridden properties or methods from a class, especially when dealing with inheritance.

- Example:
  <?php 

class democlass {
	const PI = 3.14;
}

echo democlass::PI;

?>

Q.6  What are the difference between abstract classes and interfaces?
=>  
- Abstract Class:
	1. Can have both abstract and concrete methods.
	2. Single inheritance (one abstract class).	
	3. Can provide some default behavior.	
	4. Can have properties and maintain state.	
	5. Use when you want shared code and state.	
- Interface:
	1. Only method declarations (no implementations).
	2. Multiple inheritance (can implement multiple interfaces).
	3. No default implementation (all methods must be implemented).
	4. Cannot have properties (only constants).
	5. Use to define a contract for diverse classes.

Q.7  Define Constructor and Distructor.
=>  
- Constructor:
	A constructor is a special method that is automatically called when an object is instantiated from a class. It is typically used to initialize object properties or perform setup tasks.

- Distructor:
	A destructor is a special method that is automatically called when an object is destroyed or goes out of scope. It is commonly used to clean up resources, such as closing database connections or freeing up memory.

Q.8  How to Load Classes in php?
=>  PHP parser loads it automatically, if it is registered with spl_autoload_register() function. PHP parser gets the least chance to load class/interface before emitting an error. 
-  Syntax: 
	spl_autoload_register(function ($class_name) {
  		include $class_name . '.php';
	});

Q.9  How to call Parent Constructor?
=>  In order to run a parent constructor, a call to parent::__construct() within the child constructor is required. If the child does not define a constructor then it may be inherited from the parent class just like a normal class method (if it was not declared as private). $obj = new OtherSubClass(); ?>

- Example:
	<?php
class BaseClass {
    function __construct() {
        print "In BaseClass constructor\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "In SubClass constructor\n";
    }
}

class OtherSubClass extends BaseClass {
    // inherits BaseClass's constructor
}


Q.10  Are parent Constructor called implicity when Create an objectof Class?
=>   Parent constructors are not called implicitly if the child class defines a constructor. In order to run a parent constructor, a call to parent::__construct() within the child constructor is required.


Q.11 What Happens, If Constructor Is Defined As Private Or Protected?
=>  
-  Private Constructor:
	Access Restriction: 
		The constructor can only be called from within the class itself.
	Use Case: 
		Useful for implementing the Singleton pattern, where you want to ensure that only one instance of 	the class can be created.
- Protected Constructor:
	Access Restriction: 
		The constructor can only be called from within the class and its subclasses.
	Use Case: 
		Useful when you want to allow instantiation only through subclasses or when extending functionality.


Q.12 What are PHP Magic Methods/Functions? List them Write program for Static Keyword in PHP?
=>  Magic methods in PHP are special methods that begin with double underscores (__). They are automatically called in certain situations and allow you to implement specific behavior in your classes.

- Hereâ€™s a list of common magic methods:
	__construct(): Called when a new object is created.
	__destruct(): Called when an object is destroyed.
	__call($name, $arguments): Invoked when an inaccessible method is called.
	__callStatic($name, $arguments): Invoked when an inaccessible static method is called.
	__get($name): Called when accessing an inaccessible property.
	__set($name, $value): Called when setting an inaccessible property.
	__isset($name): Called when calling isset() on an inaccessible property.
	__unset($name): Called when unset() is used on an inaccessible property.
	__toString(): Called when an object is treated as a string (e.g., echo).
	__invoke(): Called when an object is called as a function.
	__sleep(): Called when serializing an object.
	__wakeup(): Called when unserializing an object.
	__clone(): Called when an object is cloned.


Q.13  Create Multiple Traits and use it in to a single class?
=>  
- Create Multiple Traits:
	trait Logger {
    		public function log($message) {
        		echo "Log: $message\n";
    		}
	}

	trait Database {
    		public function connect() {
        		echo "Connecting to the database...\n";
    		}
	}

	trait FileHandler {
    		public function readFile($filename) {
        		echo "Reading file: $filename\n";
    		}
	}

- Use into Single Class:
	class Application {
    		use Logger, Database, FileHandler; // Using multiple traits

    		public function run() {
        		$this->log("Application started");
        		$this->connect();
       			$this->readFile("data.txt");
    		}
	}

	$app = new Application();
	$app->run();



Q.14  Write PHP Script of Objects Iteration?
=>  Script:

	<?php
		function printIterable(iterable $myIterable) {
  			foreach($myIterable as $item) {
    				echo $item;
  			}
		}

	$arr = ["a", "b", "c"];
	printIterable($arr);
	?>

Q.15 Use of the $this keyword.
=> In PHP, the $this keyword is used within an object context to refer to the current instance of the class.

- Example:
	class Person {
    		public $name;

    		public function __construct($name) {
        		$this->name = $name;     
		}
	}



